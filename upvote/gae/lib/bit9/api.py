# Copyright 2017 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Module for interacting with the Bit9 REST API ORM."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from upvote.gae.lib.bit9 import constants
from upvote.gae.lib.bit9 import context
from upvote.gae.lib.bit9 import exceptions
from upvote.gae.lib.bit9 import model  # pylint: disable=unused-import


# Import only the externally relevant names into the modules's namespace.
# pylint: disable=invalid-name
METHOD = constants.METHOD
VERSION = constants.VERSION

BaseContext = context.BaseContext
Context = context.Context
UnicodeToAscii = context.UnicodeToAscii

Error = exceptions.Error
NotFoundError = exceptions.NotFoundError
QueryError = exceptions.QueryError
RequestError = exceptions.RequestError
PropertyError = exceptions.PropertyError
# pylint: enable=invalid-name


# NOTE: This API is automatically generated by the build_from_docs.py script.
# Updates can be implemented there and regenerated from the docs.

# pylint: disable=missing-docstring,line-too-long


################################################################################
####################### Generated by build_from_docs.py ########################
################################################################################


class ApprovalRequest(model.Model):
  ROUTE = 'approvalRequest'

  id = model.Int32Property('id')
  file_catalog_id = model.Int32Property('fileCatalogId', expands_to='FileCatalog')
  installer_file_catalog_id = model.Int32Property('installerFileCatalogId', expands_to='FileCatalog')
  process_file_catalog_id = model.Int32Property('processFileCatalogId', expands_to='FileCatalog')
  computer_id = model.Int32Property('computerId', expands_to='Computer')
  computer_name = model.StringProperty('computerName')
  date_created = model.DateTimeProperty('dateCreated')
  created_by = model.StringProperty('createdBy')
  created_by_user_id = model.Int32Property('createdByUserId')
  date_modified = model.DateTimeProperty('dateModified')
  modified_by = model.StringProperty('modifiedBy')
  modified_by_user_id = model.Int32Property('modifiedByUserId')
  enforcement_level = model.Int32Property('enforcementLevel')
  resolution = model.Int32Property('resolution', allow_update=True)
  request_type = model.Int32Property('requestType')
  requestor_comments = model.StringProperty('requestorComments')
  requestor_email = model.StringProperty('requestorEmail', allow_update=True)
  priority = model.Int32Property('priority')
  resolution_comments = model.StringProperty('resolutionComments', allow_update=True)
  status = model.Int32Property('status', allow_update=True)
  policy_id = model.Int32Property('policyId', expands_to='Policy')
  multiple_blocks = model.BooleanProperty('multipleBlocks')
  file_name = model.StringProperty('fileName')
  path_name = model.StringProperty('pathName')
  process = model.StringProperty('process')
  custom_rule_id = model.Int32Property('customRuleId')


class Certificate(model.Model):
  ROUTE = 'certificate'

  id = model.Int32Property('id')
  parent_certificate_id = model.Int32Property(
      'parentCertificateId', expands_to='Certificate')
  publisher_id = model.Int32Property('publisherId', expands_to='Publisher')
  thumbprint = model.StringProperty('thumbprint')
  thumbprint_algorithm = model.StringProperty('thumbprintAlgorithm')
  subject_name = model.StringProperty('subjectName')
  signature_algorithm = model.StringProperty('signatureAlgorithm')
  serial_number = model.StringProperty('serialNumber')
  valid_from = model.DateTimeProperty('validFrom')
  valid_to = model.DateTimeProperty('validTo')
  public_key_algorithm = model.StringProperty('publicKeyAlgorithm')
  public_key_size = model.Int32Property('publicKeySize')
  first_seen_computer_id = model.Int32Property(
      'firstSeenComputerId', expands_to='Computer')
  description = model.StringProperty('description', allow_update=True)
  source_type = model.Int32Property('sourceType')
  date_created = model.DateTimeProperty('dateCreated')
  date_modified = model.DateTimeProperty('dateModified')
  modified_by_user = model.StringProperty('modifiedByUser')
  modified_by_user_id = model.Int32Property('modifiedByUserId')
  intermediary = model.BooleanProperty('intermediary')
  valid = model.BooleanProperty('valid')
  embedded = model.BooleanProperty('embedded')
  detached = model.BooleanProperty('detached')
  signer = model.BooleanProperty('signer')
  cosigner = model.BooleanProperty('cosigner')
  certificate_state = model.Int32Property('certificateState', allow_update=True)
  certificate_effective_state = model.Int32Property('certificateEffectiveState')
  cl_version = model.Int64Property('clVersion')


class Computer(model.Model):
  ROUTE = 'computer'

  id = model.Int32Property('id')
  name = model.StringProperty('name', allow_update=True)
  computer_tag = model.StringProperty('computerTag', allow_update=True)
  description = model.StringProperty('description', allow_update=True)
  policy_id = model.Int32Property('policyId', allow_update=True, expands_to='Policy')
  previous_policy_id = model.Int32Property('previousPolicyId', expands_to='Policy')
  policy_name = model.StringProperty('policyName')
  automatic_policy = model.BooleanProperty('automaticPolicy', allow_update=True)
  local_approval = model.BooleanProperty('localApproval', allow_update=True)
  users = model.StringProperty('users')
  ip_address = model.StringProperty('ipAddress')
  connected = model.BooleanProperty('connected')
  enforcement_level = model.Int32Property('enforcementLevel')
  disconnected_enforcement_level = model.Int32Property('disconnectedEnforcementLevel')
  cli_password = model.StringProperty('CLIPassword')
  last_register_date = model.DateTimeProperty('lastRegisterDate')
  last_poll_date = model.DateTimeProperty('lastPollDate')
  os_short_name = model.StringProperty('osShortName')
  os_name = model.StringProperty('osName')
  platform_id = model.Int32Property('platformId')
  virtualized = model.StringProperty('virtualized')
  virtual_platform = model.StringProperty('virtualPlatform')
  date_created = model.DateTimeProperty('dateCreated')
  agent_version = model.StringProperty('agentVersion')
  days_offline = model.Int32Property('daysOffline')
  uninstalled = model.BooleanProperty('uninstalled')
  deleted = model.BooleanProperty('deleted')
  processor_count = model.Int32Property('processorCount')
  processor_speed = model.DoubleProperty('processorSpeed')
  processor_model = model.StringProperty('processorModel')
  machine_model = model.StringProperty('machineModel')
  memory_size = model.Int32Property('memorySize')
  upgrade_status = model.StringProperty('upgradeStatus')
  upgrade_error = model.StringProperty('upgradeError')
  upgrade_error_time = model.DateTimeProperty('upgradeErrorTime')
  upgrade_error_count = model.Int32Property('upgradeErrorCount')
  sync_flags = model.Int32Property('syncFlags')
  refresh_flags = model.Int32Property('refreshFlags', allow_update=True)
  policy_status = model.StringProperty('policyStatus')
  policy_status_details = model.StringProperty('policyStatusDetails')
  prioritized = model.BooleanProperty('prioritized', allow_update=True)
  mac_address = model.StringProperty('macAddress')
  debug_level = model.Int32Property('debugLevel', allow_update=True)
  kernel_debug_level = model.Int32Property('kernelDebugLevel', allow_update=True)
  debug_flags = model.Int32Property('debugFlags', allow_update=True)
  debug_duration = model.Int32Property('debugDuration', allow_update=True)
  active_debug_level = model.Int32Property('activeDebugLevel')
  active_kernel_debug_level = model.Int32Property('activeKernelDebugLevel')
  active_debug_flags = model.Int32Property('activeDebugFlags')
  cc_level = model.Int32Property('ccLevel', allow_update=True)
  cc_flags = model.Int32Property('ccFlags', allow_update=True)
  supported_kernel = model.BooleanProperty('supportedKernel')
  force_upgrade = model.BooleanProperty('forceUpgrade', allow_update=True)
  has_health_check_errors = model.BooleanProperty('hasHealthCheckErrors')
  cl_version = model.Int32Property('clVersion')
  agent_memory_dumps = model.Int32Property('agentMemoryDumps')
  system_memory_dumps = model.Int32Property('systemMemoryDumps')
  initializing = model.BooleanProperty('initializing')
  is_active = model.BooleanProperty('isActive')
  tamper_protection_active = model.BooleanProperty('tamperProtectionActive')
  agent_cache_size = model.Int32Property('agentCacheSize')
  agent_queue_size = model.Int32Property('agentQueueSize')
  sync_percent = model.Int32Property('syncPercent')
  init_percent = model.Int32Property('initPercent')
  td_count = model.Int32Property('tdCount')
  template = model.BooleanProperty('template', allow_update=True)
  template_computer_id = model.Int32Property('templateComputerId', expands_to='Computer')
  template_date = model.DateTimeProperty('templateDate')
  template_clone_cleanup_mode = model.Int32Property('templateCloneCleanupMode', allow_update=True)
  template_clone_cleanup_time = model.Int32Property('templateCloneCleanupTime', allow_update=True)
  template_clone_cleanup_time_scale = model.Int32Property('templateCloneCleanupTimeScale', allow_update=True)
  template_track_mods_only = model.BooleanProperty('templateTrackModsOnly', allow_update=True)
  cb_sensor_id = model.Int32Property('cbSensorId')
  cb_sensor_version = model.StringProperty('cbSensorVersion')
  cb_sensor_flags = model.Int32Property('cbSensorFlags')
  has_duplicates = model.BooleanProperty('hasDuplicates')
  scep_status = model.Int32Property('SCEPStatus')


class Event(model.Model):
  ROUTE = 'event'

  id = model.Int64Property('id')
  timestamp = model.DateTimeProperty('timestamp')
  received_timestamp = model.DateTimeProperty('receivedTimestamp')
  description = model.StringProperty('description')
  type = model.Int32Property('type')
  subtype = model.Int32Property('subtype')
  subtype_name = model.StringProperty('subtypeName')
  ip_address = model.StringProperty('ipAddress')
  computer_id = model.Int32Property('computerId', expands_to='Computer')
  computer_name = model.StringProperty('computerName')
  policy_id = model.Int32Property('policyId', expands_to='Policy')
  policy_name = model.StringProperty('policyName')
  file_catalog_id = model.Int32Property('fileCatalogId', expands_to='FileCatalog')
  installer_file_catalog_id = model.Int32Property('installerFileCatalogId', expands_to='FileCatalog')
  process_file_catalog_id = model.Int32Property('processFileCatalogId', expands_to='FileCatalog')
  file_name = model.StringProperty('fileName')
  path_name = model.StringProperty('pathName')
  command_line = model.StringProperty('commandLine')
  process_path_name = model.StringProperty('processPathName')
  process_file_name = model.StringProperty('processFileName')
  installer_file_name = model.StringProperty('installerFileName')
  process_key = model.StringProperty('processKey')
  severity = model.Int32Property('severity')
  user_name = model.StringProperty('userName')
  rule_name = model.StringProperty('ruleName')
  ban_name = model.StringProperty('banName')
  updater_name = model.StringProperty('updaterName')
  indicator_name = model.StringProperty('indicatorName')
  param1 = model.StringProperty('param1')
  param2 = model.StringProperty('param2')
  param3 = model.StringProperty('param3')
  string_id = model.Int32Property('stringId')


class FileCatalog(model.Model):
  ROUTE = 'fileCatalog'

  id = model.Int32Property('id')
  date_created = model.DateTimeProperty('dateCreated')
  path_name = model.StringProperty('pathName')
  file_name = model.StringProperty('fileName')
  file_extension = model.StringProperty('fileExtension')
  computer_id = model.Int32Property('computerId', expands_to='Computer')
  md5 = model.StringProperty('md5')
  sha1 = model.StringProperty('sha1')
  sha256 = model.StringProperty('sha256')
  sha256_hash_type = model.Int32Property('sha256HashType')
  file_type = model.StringProperty('fileType')
  file_size = model.Int64Property('fileSize')
  product_name = model.StringProperty('productName')
  publisher = model.StringProperty('publisher')
  company = model.StringProperty('company')
  publisher_or_company = model.StringProperty('publisherOrCompany')
  product_version = model.StringProperty('productVersion')
  installed_program_name = model.StringProperty('installedProgramName')
  reputation_available = model.BooleanProperty('reputationAvailable')
  trust = model.Int32Property('trust')
  trust_messages = model.StringProperty('trustMessages')
  threat = model.Int16Property('threat')
  category = model.StringProperty('category')
  file_state = model.Int32Property('fileState')
  publisher_state = model.Int32Property('publisherState')
  certificate_state = model.Int32Property('certificateState')
  effective_state = model.StringProperty('effectiveState')
  approved_by_reputation = model.BooleanProperty('approvedByReputation')
  reputation_enabled = model.BooleanProperty('reputationEnabled')
  prevalence = model.Int32Property('prevalence')
  file_flags = model.Int32Property('fileFlags')
  publisher_id = model.Int32Property('publisherId', expands_to='Publisher')
  certificate_id = model.Int32Property('certificateId', expands_to='Certificate')


class FileInstance(model.Model):
  ROUTE = 'fileInstance'

  id = model.Int64Property('id')
  file_catalog_id = model.Int32Property('fileCatalogId', expands_to='FileCatalog')
  file_instance_group_id = model.Int64Property('fileInstanceGroupId')
  computer_id = model.Int32Property('computerId', expands_to='Computer')
  date_created = model.DateTimeProperty('dateCreated')
  file_name = model.StringProperty('fileName')
  path_name = model.StringProperty('pathName')
  executed = model.BooleanProperty('executed')
  local_state = model.Int32Property('localState', allow_update=True)
  detailed_local_state = model.Int32Property('detailedLocalState')
  detached_publisher_id = model.Int32Property('detachedPublisherId', expands_to='Publisher')
  detached_certificate_id = model.Int32Property('detachedCertificateId', expands_to='Certificate')


class FileRule(model.Model):
  ROUTE = 'fileRule'

  id = model.Int64Property('id')
  file_catalog_id = model.Int32Property('fileCatalogId', allow_update=True, expands_to='FileCatalog')
  name = model.StringProperty('name', allow_update=True)
  description = model.StringProperty('description', allow_update=True)
  file_state = model.Int32Property('fileState', allow_update=True)
  source_type = model.Int32Property('sourceType')
  source_id = model.Int32Property('sourceId')
  report_only = model.BooleanProperty('reportOnly', allow_update=True)
  reputation_approvals_enabled = model.BooleanProperty('reputationApprovalsEnabled', allow_update=True)
  force_installer = model.BooleanProperty('forceInstaller', allow_update=True)
  force_not_installer = model.BooleanProperty('forceNotInstaller', allow_update=True)
  policy_ids = model.StringProperty('policyIds', allow_update=True)
  hash = model.StringProperty('hash', allow_update=True)
  platform_flags = model.Int32Property('platformFlags', allow_update=True)
  date_created = model.DateTimeProperty('dateCreated')
  created_by = model.StringProperty('createdBy')
  created_by_user_id = model.Int32Property('createdByUserId')
  date_modified = model.DateTimeProperty('dateModified')
  modified_by = model.StringProperty('modifiedBy')
  modified_by_user_id = model.Int32Property('modifiedByUserId')
  cl_version = model.Int64Property('clVersion')


class Policy(model.Model):
  ROUTE = 'policy'

  id = model.Int32Property('id')
  name = model.StringProperty('name', allow_update=True)
  description = model.StringProperty('description', allow_update=True)
  package_name = model.StringProperty('packageName')
  enforcement_level = model.Int32Property('enforcementLevel', allow_update=True)
  disconnected_enforcement_level = model.Int32Property('disconnectedEnforcementLevel', allow_update=True)
  help_desk_url = model.StringProperty('helpDeskUrl')
  image_url = model.StringProperty('imageUrl')
  date_created = model.DateTimeProperty('dateCreated')
  created_by_user_id = model.Int32Property('createdByUserId')
  date_modified = model.DateTimeProperty('dateModified')
  modified_by_user_id = model.Int32Property('modifiedByUserId')
  read_only = model.BooleanProperty('readOnly')
  hidden = model.BooleanProperty('hidden')
  automatic = model.BooleanProperty('automatic', allow_update=True)
  load_agent_in_safe_mode = model.BooleanProperty('loadAgentInSafeMode', allow_update=True)
  reputation_enabled = model.BooleanProperty('reputationEnabled', allow_update=True)
  file_tracking_enabled = model.BooleanProperty('fileTrackingEnabled', allow_update=True)
  custom_logo = model.BooleanProperty('customLogo', allow_update=True)
  automatic_approvals_on_transition = model.BooleanProperty('automaticApprovalsOnTransition', allow_update=True)
  allow_agent_upgrades = model.BooleanProperty('allowAgentUpgrades', allow_update=True)
  total_computers = model.Int32Property('totalComputers')
  connected_computers = model.Int32Property('connectedComputers')
  at_enforcement_computers = model.Int32Property('atEnforcementComputers')
  cl_version_max = model.Int32Property('clVersionMax')


class Publisher(model.Model):
  ROUTE = 'publisher'

  id = model.Int32Property('id')
  name = model.StringProperty('name')
  description = model.StringProperty('description', allow_update=True)
  date_created = model.DateTimeProperty('dateCreated')
  modified_by = model.StringProperty('modifiedBy')
  modified_by_user_id = model.Int32Property('modifiedByUserId')
  date_modified = model.DateTimeProperty('dateModified')
  publisher_reputation = model.Int32Property('publisherReputation')
  publisher_state = model.Int32Property('publisherState', allow_update=True)
  policy_ids = model.StringProperty('policyIds', allow_update=True)
  reputation_approvals_enabled = model.BooleanProperty('reputationApprovalsEnabled', allow_update=True)
  source_type = model.Int32Property('sourceType')
  first_seen_computer_id = model.Int32Property('firstSeenComputerId', expands_to='Computer')
  platform_flags = model.Int32Property('platformFlags')
  signed_files_count = model.Int32Property('signedFilesCount')
  signed_certificate_count = model.Int32Property('signedCertificateCount')
  hidden = model.BooleanProperty('hidden')
  cl_version = model.Int64Property('clVersion')
